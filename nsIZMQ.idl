#include "nsISupports.idl"

%{C++
#include "nsStringAPI.h"
#include <zmq.h>
%}

/*
 * zeromq XPCOM binding for 2.x / 3.x
 * @author racklin@gmail.com
 */
[scriptable, uuid(7a6fda00-0dd0-404c-8f25-89ba42ed2577)]
interface nsIZMQ : nsISupports
{

    /******************************************************************************/
    /*  0MQ socket definition.                                                    */
    /******************************************************************************/

    /*  Socket types.                                                             */
    const short ZMQ_PAIR   = 0;
    const short ZMQ_PUB    = 1;
    const short ZMQ_SUB    = 2;
    const short ZMQ_REQ    = 3;
    const short ZMQ_REP    = 4;
    const short ZMQ_DEALER = 5;
    const short ZMQ_ROUTER = 6;
    const short ZMQ_PULL   = 7;
    const short ZMQ_PUSH   = 8;
    const short ZMQ_XPUB   = 9;
    const short ZMQ_XSUB   = 10;

    /*  Socket options.                                                           */
    const short ZMQ_HWM             = 1;
    const short ZMQ_SWAP            = 3;
    const short ZMQ_AFFINITY        = 4;
    const short ZMQ_IDENTITY        = 5;
    const short ZMQ_SUBSCRIBE       = 6;
    const short ZMQ_UNSUBSCRIBE     = 7;
    const short ZMQ_RATE            = 8;
    const short ZMQ_RECOVERY_IVL    = 9;
    const short ZMQ_MCAST_LOOP      = 10;
    const short ZMQ_SNDBUF          = 11;
    const short ZMQ_RCVBUF          = 12;
    const short ZMQ_RCVMORE         = 13;
    const short ZMQ_FD              = 14;
    const short ZMQ_EVENTS          = 15;
    const short ZMQ_TYPE            = 16;
    const short ZMQ_LINGER          = 17;
    const short ZMQ_RECONNECT_IVL   = 18;
    const short ZMQ_BACKLOG         = 19;
    const short ZMQ_RECOVERY_IVL_MSEC = 20;   /*  opt. recovery time, reconcile in 3.x   */
    const short ZMQ_RECONNECT_IVL_MAX = 21;
    const short ZMQ_RCVTIMEO          = 27;
    const short ZMQ_SNDTIMEO          = 28;

    /*  Send/recv options.                                                        */
    const short ZMQ_NOBLOCK = 1;
    const short ZMQ_SNDMORE = 2;


    /******************************************************************************/
    /*  I/O multiplexing.                                                         */
    /******************************************************************************/

    const short ZMQ_POLLIN  = 1;
    const short ZMQ_POLLOUT = 2;
    const short ZMQ_POLLERR = 4;

    readonly attribute  AUTF8String lastErrorString;
    readonly attribute  int32_t lastErrorNo;
    readonly attribute  AUTF8String version;


    /******************************************************************************/
    /*  0MQ infrastructure (a.k.a. context) initialisation & termination.         */
    /******************************************************************************/
    void init(in int32_t io_threads);
    int32_t term();

    void socket (in short socket_type);
    int32_t close ();
    int32_t setsockopt (in int32_t option, in AUTF8String optval);
    AUTF8String getsockopt (in int32_t option);
    int32_t bind (in AUTF8String addr);
    int32_t connect (in AUTF8String addr);
    int32_t send (in AUTF8String msg, [optional] in int32_t flags);
    AUTF8String recv ([optional] in int32_t flags);


};

